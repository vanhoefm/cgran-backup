/*
		* config.h is generated by configure.  It contains the results
		* of probing for features, options etc.  It should be the first
		* file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "tait_c4fm_detect_s.h"
#include <gr_io_signature.h>

// For the int16_t definition
#include <stdint.h>
		
/*
* Create a new instance of tait_c4fm_detect_s and return
* a boost shared_ptr.  This is effectively the public constructor.
 */
tait_c4fm_detect_s_sptr tait_make_c4fm_detect_s (/*uint16_t averageCount*/)
{
	return tait_c4fm_detect_s_sptr (new tait_c4fm_detect_s (/*averageCount*/));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 0;	// minimum number of output streams
static const int MAX_OUT = 0;	// maximum number of output streams

/*
 * The private constructor
 */
tait_c4fm_detect_s::tait_c4fm_detect_s (/*uint16_t averageCount*/)
	: gr_sync_block ("c4fm_detect_s",
			 gr_make_io_signature (MIN_IN, MAX_IN, sizeof (int16_t)),
			 gr_make_io_signature (MIN_OUT, MAX_OUT, 0))
{
	conf = 8; // shouldn't be hard coded (jonas)
	spapmd_C4FMDetectConfigure(conf);
	spapmd_C4FMDetectReset();
}

/*
 * Our virtual destructor.
 */
tait_c4fm_detect_s::~tait_c4fm_detect_s ()
{
}

int tait_c4fm_detect_s::work (int noutput_items,
			      gr_vector_const_void_star &input_items,
			      gr_vector_void_star &output_items)
{

	int16_t *in = (int16_t *) input_items[0];

// 	spapmd_ProcessC4FMDetect(in, 0, (uint16_t) noutput_items);
	callDSP_func(in, 0, (uint16_t) noutput_items, spapmd_ProcessC4FMDetect, 24);
	// Tell runtime system how many output items we produced.
	return noutput_items;
}

