import os
import numpy
import math
import sys
import time

def compute_preemph(p_on,size):
	tmptaps = numpy.zeros(size, dtype=numpy.complex)
	realtaps = [ 0.25002, 0.250081, 0.250182, 0.250323, 0.250504, 0.250724, 0.250983, 0.251282,
0.251619, 0.251995, 0.252409, 0.252861, 0.253351, 0.253879, 0.254444, 0.255046,
0.255684, 0.25636, 0.257072, 0.25782, 0.258604, 0.259424, 0.260279, 0.261169,
0.262095, 0.263055, 0.264049, 0.265078, 0.266141, 0.267238, 0.268368, 0.269531,
0.270728, 0.271957, 0.273219, 0.274513, 0.27584, 0.277198, 0.278588, 0.280009,
0.281461, 0.282945, 0.284459, 0.286003, 0.287578, 0.289182, 0.290817, 0.29248,
0.294174, 0.295896, 0.297646, 0.299426, 0.301233, 0.303069, 0.304933, 0.306824,
0.308742, 0.310688, 0.31266, 0.314659, 0.316685, 0.318736, 0.320814, 0.322917,
0.325045, 0.327199, 0.329378, 0.331581, 0.333809, 0.336061, 0.338337, 0.340637,
0.342961, 0.345307, 0.347677, 0.35007, 0.352485, 0.354922, 0.357382, 0.359863,
0.362366, 0.364891, 0.367436, 0.370003, 0.37259, 0.375197, 0.377825, 0.380473,
0.38314, 0.385827, 0.388533, 0.391258, 0.394002, 0.396764, 0.399545, 0.402344,
0.40516, 0.407994, 0.410846, 0.413714, 0.416599, 0.419501, 0.42242, 0.425354,
0.428304, 0.43127, 0.434252, 0.437248, 0.44026, 0.443286, 0.446327, 0.449382,
0.45245, 0.455533, 0.458629, 0.461739, 0.464861, 0.467996, 0.471144, 0.474304,
0.477476, 0.48066, 0.483856, 0.487063, 0.490281, 0.49351, 0.49675, 0.5,
0.50326, 0.506531, 0.509811, 0.513102, 0.516403, 0.519714, 0.523036, 0.526367,
0.529709, 0.533061, 0.536423, 0.539795, 0.543177, 0.54657, 0.549973, 0.553385,
0.556808, 0.560242, 0.563685, 0.567139, 0.570602, 0.574076, 0.57756, 0.581055,
0.584559, 0.588074, 0.591599, 0.595133, 0.598679, 0.602234, 0.605799, 0.609375,
0.612961, 0.616557, 0.620163, 0.623779, 0.627406, 0.631042, 0.634689, 0.638346,
0.642014, 0.645691, 0.649378, 0.653076, 0.656784, 0.660502, 0.66423, 0.667969,
0.671717, 0.675476, 0.679245, 0.683024, 0.686813, 0.690613, 0.694422, 0.698242,
0.702072, 0.705912, 0.709763, 0.713623, 0.717494, 0.721375, 0.725266, 0.729167,
0.733078, 0.737, 0.740931, 0.744873, 0.748825, 0.752787, 0.75676, 0.760742,
0.764735, 0.768738, 0.772751, 0.776774, 0.780807, 0.784851, 0.788905, 0.792969,
0.797043, 0.801127, 0.805222, 0.809326, 0.813441, 0.817566, 0.821701, 0.825846,
0.830002, 0.834167, 0.838343, 0.842529, 0.846725, 0.850932, 0.855148, 0.859375,
0.863612, 0.867859, 0.872116, 0.876383, 0.880661, 0.884949, 0.889247, 0.893555,
0.897873, 0.902201, 0.90654, 0.910889, 0.915248, 0.919617, 0.923996, 0.928385,
0.932785, 0.937195, 0.941615, 0.946045, 0.950485, 0.954936, 0.959396, 0.963867,
0.968348, 0.972839, 0.977341, 0.981852, 0.986374, 0.990906, 0.995448, 1.0,
1.0, 0.995448, 0.990906, 0.986374, 0.981852, 0.977341, 0.972839, 0.968348,
0.963867, 0.959396, 0.954936, 0.950485, 0.946045, 0.941615, 0.937195, 0.932785,
0.928385, 0.923996, 0.919617, 0.915248, 0.910889, 0.90654, 0.902201, 0.897873,
0.893555, 0.889247, 0.884949, 0.880661, 0.876383, 0.872116, 0.867859, 0.863612,
0.859375, 0.855148, 0.850932, 0.846725, 0.842529, 0.838343, 0.834167, 0.830002,
0.825846, 0.821701, 0.817566, 0.813441, 0.809326, 0.805222, 0.801127, 0.797043,
0.792969, 0.788905, 0.784851, 0.780807, 0.776774, 0.772751, 0.768738, 0.764735,
0.760742, 0.75676, 0.752787, 0.748825, 0.744873, 0.740931, 0.737, 0.733078,
0.729167, 0.725266, 0.721375, 0.717494, 0.713623, 0.709763, 0.705912, 0.702072,
0.698242, 0.694422, 0.690613, 0.686813, 0.683024, 0.679245, 0.675476, 0.671717,
0.667969, 0.66423, 0.660502, 0.656784, 0.653076, 0.649378, 0.645691, 0.642014,
0.638346, 0.634689, 0.631042, 0.627406, 0.623779, 0.620163, 0.616557, 0.612961,
0.609375, 0.605799, 0.602234, 0.598679, 0.595133, 0.591599, 0.588074, 0.584559,
0.581055, 0.57756, 0.574076, 0.570602, 0.567139, 0.563685, 0.560242, 0.556808,
0.553385, 0.549973, 0.54657, 0.543177, 0.539795, 0.536423, 0.533061, 0.529709,
0.526367, 0.523036, 0.519714, 0.516403, 0.513102, 0.509811, 0.506531, 0.50326,
0.5, 0.49675, 0.49351, 0.490281, 0.487063, 0.483856, 0.48066, 0.477476,
0.474304, 0.471144, 0.467996, 0.464861, 0.461739, 0.458629, 0.455533, 0.45245,
0.449382, 0.446327, 0.443286, 0.44026, 0.437248, 0.434252, 0.43127, 0.428304,
0.425354, 0.42242, 0.419501, 0.416599, 0.413714, 0.410846, 0.407994, 0.40516,
0.402344, 0.399545, 0.396764, 0.394002, 0.391258, 0.388533, 0.385827, 0.38314,
0.380473, 0.377825, 0.375197, 0.37259, 0.370003, 0.367436, 0.364891, 0.362366,
0.359863, 0.357382, 0.354922, 0.352485, 0.35007, 0.347677, 0.345307, 0.342961,
0.340637, 0.338337, 0.336061, 0.333809, 0.331581, 0.329378, 0.327199, 0.325045,
0.322917, 0.320814, 0.318736, 0.316685, 0.314659, 0.31266, 0.310688, 0.308742,
0.306824, 0.304933, 0.303069, 0.301233, 0.299426, 0.297646, 0.295896, 0.294174,
0.29248, 0.290817, 0.289182, 0.287578, 0.286003, 0.284459, 0.282945, 0.281461,
0.280009, 0.278588, 0.277198, 0.27584, 0.274513, 0.273219, 0.271957, 0.270728,
0.269531, 0.268368, 0.267238, 0.266141, 0.265078, 0.264049, 0.263055, 0.262095,
0.261169, 0.260279, 0.259424, 0.258604, 0.25782, 0.257072, 0.25636, 0.255684,
0.255046, 0.254444, 0.253879, 0.253351, 0.252861, 0.252409, 0.251995, 0.251619,
0.251282, 0.250983, 0.250724, 0.250504, 0.250323, 0.250182, 0.250081, 0.25002 ]

	x = len(realtaps)
	if size > x:
		size = x
	if size < x/4:
		size = x/4
		
	skip = int(x/size)

	for n in range(0,len(tmptaps)):
		tmptaps[n] = complex(realtaps[n*skip], 0.0)
	
	if p_on == False:
		tmptaps = [complex(1.0,0.0)]
	
	return (numpy.fft.ifft(tmptaps))

def log_clipping(value,lim,fn):
	if value > lim:
		gmt=time.gmtime()
		newfn = form_filename("clip-",gmt)
		f = open(newfn, "a")
		f.write(form_logdate(gmt)+
		" UTC clipped at "+("%7.3f" % value)+"\n")
		f.close()

def rxpower_log(value):
	alpha=0.4
	try:
		x = (alpha*value) + ((1.0-alpha)*rxpower_log.x)
	except AttributeError:
		rxpower_log.x = 0.001
		x = ((alpha)*value) + ((1.0-alpha)*rxpower_log.x)	
	
	rxpower_log.x = x
	gmt=time.gmtime()
	if int(gmt.tm_sec) in [0,5,10,15,20,25,30,35,40,45,50,55]:
		newfn = form_filename("rxpower-", gmt)
		f = open(newfn, "a")
		f.write(form_logdate(gmt)+" "+("%7.3f" % (math.log10(rxpower_log.x)*10))+"\n")
		f.close()

def form_filename (prefix, gmt):
	newf = prefix
	newf = newf + "%02d" % gmt.tm_year
	newf = newf + "%02d" % gmt.tm_mon
	newf = newf + "%02d" % gmt.tm_mday
	newf = newf + ".log"
	return newf

def form_logdate (gmt):
	logd = "%04d/" % gmt.tm_year
	logd = logd + "%02d/" % gmt.tm_mon
	logd = logd + "%02d " % gmt.tm_mday
	logd = logd + "%02d:" % gmt.tm_hour
	logd = logd + "%02d:" % gmt.tm_min
	logd = logd + "%02d" % gmt.tm_sec
	return logd

def dbf (v):
	return "%7.2f" % v

def freqf (v):
	return "%9.4fM" % (v/1.0e6)

