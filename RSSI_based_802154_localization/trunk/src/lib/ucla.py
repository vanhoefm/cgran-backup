# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ucla', [dirname(__file__)])
        except ImportError:
            import _ucla
            return _ucla
        if fp is not None:
            try:
                _mod = imp.load_module('_ucla', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ucla = swig_import_helper()
    del swig_import_helper
else:
    import _ucla
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class ucla_cc1k_correlator_cb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_cc1k_correlator_cb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_cc1k_correlator_cb_sptr
        __init__(self,  p) -> ucla_cc1k_correlator_cb_sptr
        """
        this = _ucla.new_ucla_cc1k_correlator_cb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_cc1k_correlator_cb_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_cc1k_correlator_cb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_cc1k_correlator_cb_sptr_check_topology(self, *args)

ucla_cc1k_correlator_cb_sptr_swigregister = _ucla.ucla_cc1k_correlator_cb_sptr_swigregister
ucla_cc1k_correlator_cb_sptr_swigregister(ucla_cc1k_correlator_cb_sptr)

ucla_cc1k_correlator_cb_sptr.block = lambda self: ucla_cc1k_correlator_cb_block (self)
ucla_cc1k_correlator_cb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def cc1k_correlator_cb(*args):
  """
    cc1k_correlator_cb(int payload_bytesize, unsigned char sync_byte, unsigned char nsync_byte, 
        unsigned char manchester) -> ucla_cc1k_correlator_cb_sptr
    """
  return _ucla.cc1k_correlator_cb(*args)
class ucla_sos_packet_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_sos_packet_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_sos_packet_sink_sptr
        __init__(self,  p) -> ucla_sos_packet_sink_sptr
        """
        this = _ucla.new_ucla_sos_packet_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_sos_packet_sink_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_sos_packet_sink_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_sos_packet_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_sos_packet_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_sos_packet_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_sos_packet_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_sos_packet_sink_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_sos_packet_sink_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_sos_packet_sink_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_sos_packet_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_sos_packet_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_sos_packet_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_sos_packet_sink_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_sos_packet_sink_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_sos_packet_sink_sptr_check_topology(self, *args)

ucla_sos_packet_sink_sptr_swigregister = _ucla.ucla_sos_packet_sink_sptr_swigregister
ucla_sos_packet_sink_sptr_swigregister(ucla_sos_packet_sink_sptr)

ucla_sos_packet_sink_sptr.block = lambda self: ucla_sos_packet_sink_block (self)
ucla_sos_packet_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def sos_packet_sink(*args):
  """
    sos_packet_sink(__dummy_0__ sync_vector, gr_msg_queue_sptr target_queue, 
        int threshold) -> ucla_sos_packet_sink_sptr
    """
  return _ucla.sos_packet_sink(*args)
class ucla_ieee802_15_4_packet_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_ieee802_15_4_packet_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_ieee802_15_4_packet_sink_sptr
        __init__(self,  p) -> ucla_ieee802_15_4_packet_sink_sptr
        """
        this = _ucla.new_ucla_ieee802_15_4_packet_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_ieee802_15_4_packet_sink_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_ieee802_15_4_packet_sink_sptr_check_topology(self, *args)

ucla_ieee802_15_4_packet_sink_sptr_swigregister = _ucla.ucla_ieee802_15_4_packet_sink_sptr_swigregister
ucla_ieee802_15_4_packet_sink_sptr_swigregister(ucla_ieee802_15_4_packet_sink_sptr)

ucla_ieee802_15_4_packet_sink_sptr.block = lambda self: ucla_ieee802_15_4_packet_sink_block (self)
ucla_ieee802_15_4_packet_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ieee802_15_4_packet_sink(*args):
  """ieee802_15_4_packet_sink(gr_msg_queue_sptr target_queue, int threshold) -> ucla_ieee802_15_4_packet_sink_sptr"""
  return _ucla.ieee802_15_4_packet_sink(*args)
class ucla_qpsk_modulator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_qpsk_modulator_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_qpsk_modulator_cc_sptr
        __init__(self,  p) -> ucla_qpsk_modulator_cc_sptr
        """
        this = _ucla.new_ucla_qpsk_modulator_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_qpsk_modulator_cc_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_qpsk_modulator_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_qpsk_modulator_cc_sptr_check_topology(self, *args)

ucla_qpsk_modulator_cc_sptr_swigregister = _ucla.ucla_qpsk_modulator_cc_sptr_swigregister
ucla_qpsk_modulator_cc_sptr_swigregister(ucla_qpsk_modulator_cc_sptr)

ucla_qpsk_modulator_cc_sptr.block = lambda self: ucla_qpsk_modulator_cc_block (self)
ucla_qpsk_modulator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def qpsk_modulator_cc():
  """qpsk_modulator_cc() -> ucla_qpsk_modulator_cc_sptr"""
  return _ucla.qpsk_modulator_cc()
class ucla_symbols_to_chips_bi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_symbols_to_chips_bi)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_symbols_to_chips_bi_sptr
        __init__(self,  p) -> ucla_symbols_to_chips_bi_sptr
        """
        this = _ucla.new_ucla_symbols_to_chips_bi_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_symbols_to_chips_bi_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_symbols_to_chips_bi_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_symbols_to_chips_bi_sptr_check_topology(self, *args)

ucla_symbols_to_chips_bi_sptr_swigregister = _ucla.ucla_symbols_to_chips_bi_sptr_swigregister
ucla_symbols_to_chips_bi_sptr_swigregister(ucla_symbols_to_chips_bi_sptr)

ucla_symbols_to_chips_bi_sptr.block = lambda self: ucla_symbols_to_chips_bi_block (self)
ucla_symbols_to_chips_bi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def symbols_to_chips_bi():
  """symbols_to_chips_bi() -> ucla_symbols_to_chips_bi_sptr"""
  return _ucla.symbols_to_chips_bi()
class ucla_manchester_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_manchester_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_manchester_ff_sptr
        __init__(self,  p) -> ucla_manchester_ff_sptr
        """
        this = _ucla.new_ucla_manchester_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_manchester_ff_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_manchester_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_manchester_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_manchester_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_manchester_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_manchester_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_manchester_ff_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_manchester_ff_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_manchester_ff_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_manchester_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_manchester_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_manchester_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_manchester_ff_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_manchester_ff_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_manchester_ff_sptr_check_topology(self, *args)

ucla_manchester_ff_sptr_swigregister = _ucla.ucla_manchester_ff_sptr_swigregister
ucla_manchester_ff_sptr_swigregister(ucla_manchester_ff_sptr)

ucla_manchester_ff_sptr.block = lambda self: ucla_manchester_ff_block (self)
ucla_manchester_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def manchester_ff():
  """manchester_ff() -> ucla_manchester_ff_sptr"""
  return _ucla.manchester_ff()
class ucla_delay_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_delay_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_delay_cc_sptr
        __init__(self,  p) -> ucla_delay_cc_sptr
        """
        this = _ucla.new_ucla_delay_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_delay_cc_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_delay_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_delay_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_delay_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_delay_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_delay_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_delay_cc_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_delay_cc_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_delay_cc_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_delay_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_delay_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_delay_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_delay_cc_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_delay_cc_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_delay_cc_sptr_check_topology(self, *args)

ucla_delay_cc_sptr_swigregister = _ucla.ucla_delay_cc_sptr_swigregister
ucla_delay_cc_sptr_swigregister(ucla_delay_cc_sptr)

ucla_delay_cc_sptr.block = lambda self: ucla_delay_cc_block (self)
ucla_delay_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def delay_cc(*args):
  """delay_cc(int delay) -> ucla_delay_cc_sptr"""
  return _ucla.delay_cc(*args)
class ucla_multichanneladd_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_multichanneladd_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_multichanneladd_cc_sptr
        __init__(self,  p) -> ucla_multichanneladd_cc_sptr
        """
        this = _ucla.new_ucla_multichanneladd_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_multichanneladd_cc_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_multichanneladd_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_multichanneladd_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_multichanneladd_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_multichanneladd_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_multichanneladd_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_multichanneladd_cc_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_multichanneladd_cc_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_multichanneladd_cc_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_multichanneladd_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_multichanneladd_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_multichanneladd_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_multichanneladd_cc_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_multichanneladd_cc_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_multichanneladd_cc_sptr_check_topology(self, *args)

ucla_multichanneladd_cc_sptr_swigregister = _ucla.ucla_multichanneladd_cc_sptr_swigregister
ucla_multichanneladd_cc_sptr_swigregister(ucla_multichanneladd_cc_sptr)

ucla_multichanneladd_cc_sptr.block = lambda self: ucla_multichanneladd_cc_block (self)
ucla_multichanneladd_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def multichanneladd_cc(*args):
  """multichanneladd_cc(int delay) -> ucla_multichanneladd_cc_sptr"""
  return _ucla.multichanneladd_cc(*args)
class ucla_mio_quadrature_demod_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ucla_mio_quadrature_demod_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ucla_mio_quadrature_demod_cf_sptr
        __init__(self,  p) -> ucla_mio_quadrature_demod_cf_sptr
        """
        this = _ucla.new_ucla_mio_quadrature_demod_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr___deref__(self)

    __swig_destroy__ = _ucla.delete_ucla_mio_quadrature_demod_cf_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_stop(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_detail(self)

    def set_detail(self, *args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_set_detail(self, *args)

    def name(self):
        """name(self) -> string"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_unique_id(self)

    def basic_block(self):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_basic_block(self)

    def check_topology(self, *args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _ucla.ucla_mio_quadrature_demod_cf_sptr_check_topology(self, *args)

ucla_mio_quadrature_demod_cf_sptr_swigregister = _ucla.ucla_mio_quadrature_demod_cf_sptr_swigregister
ucla_mio_quadrature_demod_cf_sptr_swigregister(ucla_mio_quadrature_demod_cf_sptr)

ucla_mio_quadrature_demod_cf_sptr.block = lambda self: ucla_mio_quadrature_demod_cf_block (self)
ucla_mio_quadrature_demod_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def mio_quadrature_demod_cf(*args):
  """mio_quadrature_demod_cf(float gain) -> ucla_mio_quadrature_demod_cf_sptr"""
  return _ucla.mio_quadrature_demod_cf(*args)


