//smartnet_parity.cc
/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <smartnet_parity.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of smartnet_parity and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
smartnet_parity_sptr smartnet_make_parity()
{
  return smartnet_parity_sptr (new smartnet_parity ());
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;    // mininum number of input streams
static const int MAX_IN = 1;    // maximum number of input streams
static const int MIN_OUT = 1;   // minimum number of output streams
static const int MAX_OUT = 1;   // maximum number of output streams

/*
 * The private constructor
 */
smartnet_parity::smartnet_parity ()
  : gr_block ("parity",
                   gr_make_io_signature (MIN_IN, MAX_IN, sizeof (char)),
                   gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (char)))
{
  set_relative_rate(0.5);
  set_output_multiple(38);
  //printf("Calling constructor\n");
}

/*
 * Our virtual destructor.
 */
smartnet_parity::~smartnet_parity ()
{
  // nothing else required in this example
}

void smartnet_parity::forecast (int noutput_items,
	       gr_vector_int &ninput_items_required) //estimate number of input samples required for noutput_items samples
{
	ninput_items_required[0] = noutput_items * 2;
}


int 
smartnet_parity::general_work (int noutput_items,
		                gr_vector_int &ninput_items,
                        gr_vector_const_void_star &input_items,
                        gr_vector_void_star &output_items)
{
  const char *in = (const char *) input_items[0];
  char *out = (char *) output_items[0];

  int j = 0; //j is the output item counter
  int i = 0; //i is the input item counter

  char expected[noutput_items * 2];
  char syndrome[noutput_items * 2];

  //first we calculate the EXPECTED parity bits from the RECEIVED bitstream
  //parity is I[i] ^ I[i-1]
  //since the bitstream is still interleaved with the P bits, we can do this while running
  expected[0] = in[0] & 0x01; //info bit
  expected[1] = in[0] & 0x01; //this is a parity bit, prev bits were 0 so we call x ^ 0 = x
  for(int k = 2; k < noutput_items*2; k+=2) {
	expected[k] = in[k] & 0x01; //info bit
	expected[k+1] = (in[k] & 0x01) ^ (in[k-2] & 0x01); //parity bit
  }

  for(int k = 0; k < noutput_items*2; k++) {
	syndrome[k] = expected[k] ^ (in[k] & 0x01); //calculate the syndrome
//	if(syndrome[k]) printf("Bit error at bit %i\n", k);
 }

  for(int k = 0; k < noutput_items-1; k++) {
	//now we correct the data using the syndrome: if two consecutive parity bits are flipped, you've got a bad previous bit
	if(syndrome[2*k+1] && syndrome[2*k+3]) {
		out[k] = (in[2*k] & 0x01) ? 0 : 1; //byte-safe bit flip
		if(in[2*k]&0x02) out[k] += 0x02; //keep that start flag
		//printf("I just flipped a bit!\n");
	}
	else out[k] = in[2*k];
  }
  out[noutput_items-1] = in[2*(noutput_items-1)]; //guard bit at the end

//  int errors = 0;
//  for(int k = 0; k < noutput_items * 2; k++) if(syndrome[k]) errors++;
//  if(errors != 0) printf("%i syndrome errors\n", errors);


  consume_each(noutput_items*2); //tell gnuradio how many input items we used
//  ninput_items[0] = i;
  // Tell runtime system how many output items we produced.
  return noutput_items;
}

