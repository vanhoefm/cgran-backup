/* -*- c++ -*- */
/* 
 * Copyright 2012 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#undef jmfdebug

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gr_io_signature.h>
#include <acars_decodeur.h>
#include<fftw3.h>
#include<time.h>

static const int MIN_IN = 1;    // mininum number of input streams
static const int MAX_IN = 1;    // maximum number of input streams
static const int MIN_OUT = 0;   // minimum number of output streams
static const int MAX_OUT = 0;   // maximum number of output streams

#define MAXSIZE 120000  // 48000/1200=40 symbol/bit & 8 bits*260 char=83200
#define NSEARCH 260  // 13 periods * 20 pts/period
#define fe 48000   // sampling frequency
#define CHUNKSIZE 8192

acars_decodeur_sptr acars_make_decodeur (float seuil1, char *filename)
{
	return acars_decodeur_sptr (new acars_decodeur (seuil1,filename));
}

acars_decodeur::acars_decodeur (float seuil1, char* filename)
	: gr_block ("decodeur",
		gr_make_io_signature (MIN_IN, MAX_IN, sizeof (float)),
		gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (float)))
{ int t;
  _pos=0;
  _Ntot=0;
  _total=0;
  _acq=0;
  _status=0;
  _filenum=0;
  _FICHIER=fopen(filename,"a");
  set_seuil(seuil1);
//  _seuil=seuil1; // 140
  _d=(float*)malloc(MAXSIZE*sizeof(float));
  _previous=(float*)malloc(CHUNKSIZE*sizeof(float));
  printf("threshold value=%f, filename=%s\n",seuil1,filename);
  for (t=0;t<20;t++)  // t=[0:520]; c2400x13=exp(i*t*2400/fe*2*pi);
    {c2400[t]=cos((float)t*2400./fe*2*M_PI); //  t=[0:20];  % 2400 Hz dans 48 kHz = 20 points/periode 
     s2400[t]=sin((float)t*2400./fe*2*M_PI); //  c2400=exp(i*t*2400/fe*2*pi);
     c1200[t]=cos((float)t*1200./fe*2*M_PI); //  c1200=exp(i*t*1200/fe*2*pi);
     s1200[t]=sin((float)t*1200./fe*2*M_PI);
    }
}

void acars_decodeur::set_seuil(float seuil1)
{printf("new threshold: %f\n",seuil1);fflush(stdout);
 _seuil=seuil1;
}

acars_decodeur::~acars_decodeur ()
{free(_d);
 free(_previous);
}

// http://www.scancat.com/Code-30_html_Source/acars.html
void acars_decodeur::acars_parse(char *message,int ends,FILE *file)
{int k;
 if (ends>12)
    if ((message[0]==0x2b) && (message[1]==0x2a) && // sync
        (message[2]==0x16) && (message[3]==0x16) && // sync
        (message[4]==0x01))                         // Start Of Heading SOH
        {printf("\nAircraft=");fprintf(file,"\nAircraft=");
         for (k=6;k<13;k++) {printf("%c",message[k]);fprintf(file,"%c",message[k]);}
         printf("\n");fprintf(file,"\n");
         if (ends>17) 
            {if (message[17]==0x02) {printf("STX\n");fprintf(file,"STX\n");}
             if (ends>=21) 
                {printf("Seq. No=");fprintf(file,"Seq. No=");
                 for (k=18;k<22;k++) {printf("%02x ",message[k]);fprintf(file,"%02x ",message[k]);}
                 for (k=18;k<22;k++) 
                     if ((message[k]>=32) || (message[k]==0x10) || (message[k]==0x13))
                        {printf("%c",message[k]);fprintf(file,"%c",message[k]);}
                 printf("\n");fprintf(file,"\n");
                 if (ends>=27) 
                    {printf("Flight=");fprintf(file,"Flight=");
                     for (k=22;k<28;k++) {printf("%c",message[k]);fprintf(file,"%c",message[k]);}
                     printf("\n");fprintf(file,"\n");
                     if (ends>=28) 
                        {k=28;
                         do {if (message[k]==0x03) {printf("ETX");fprintf(file,"ETX");}
                                else if ((message[k]>=32) || (message[k]==0x10) || (message[k]==0x13))
                                     {printf("%c",message[k]);fprintf(file,"%c",message[k]);}
                             k++;
                            } while ((k<ends-1) && (message[k-1]!=0x03));
                         printf("\n");fprintf(file,"\n");
                        }
                    }
                }
            }
        }
 fflush(stdout);fflush(file);
}

void acars_decodeur::remove_avgf(float *d,float *out,int tot_len,const float fil_len)
{int tmp,k;
 float avg=0.;
 for (k=0;k<fil_len;k++) avg+=d[k];
 for (k=0;k<tot_len-fil_len;k++)
     {out[k]=(d[k]-avg/fil_len);
      avg-=d[k];
      avg+=d[k+(int)fil_len];
     }
 for (k=tot_len-(int)fil_len;k<tot_len;k++) out[k]=d[k]-avg/fil_len;
}

void acars_decodeur::acars_dec(float *d,int N,float seuil,float *c2400,float *s2400,float *c1200,float *s1200,FILE *file)
{
 int fin,k,i,f,t,n;
 float *out,a=0.,max24=0.,seuildyn,*rs12,*rs24,*rc12,*rc24;
 char *toutd,*tout,*message,c;
 int b=0,l0=0,l0max,go=0;
 fftw_complex *c2400x13,*fc2400x13,*fd,*s,mul,*ss;
 time_t tm;

 fftw_plan plan_a, plan_b, plan_R;

 time(&tm);
 printf("\n%s\nlen=%d seuil=%f\n",ctime(&tm),N,seuil);
 fprintf(file,"\n%s\nlen=%d seuil=%f\n",ctime(&tm),N,seuil);
 out=(float*)malloc(sizeof(float)*N);
 remove_avgf(d,out,N,60);  // c=ones(60,1)/60; dm=conv(d,c);dm=dm(60/2:end-60/2); d=d-dm;
// for (k=0;k<N;k++) printf("%f %f\n",d[k],out[k]);

 c2400x13 = (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * N);
 fc2400x13= (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * N);
 fd       = (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * N);
 s        = (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * N);
 ss       = (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * N);
 for (t=0;t<520;t++)  // t=[0:520]; c2400x13=exp(i*t*2400/fe*2*pi);
    {c2400x13[t][0]=cos((float)t*2400./fe*2*M_PI);
     c2400x13[t][1]=sin((float)t*2400./fe*2*M_PI);
    }
 for (t=520;t<N;t++) {c2400x13[t][0]=0;c2400x13[t][1]=0;}
 for (k=0;k<N;k++) {s[k][0]=(float)out[k];s[k][1]=0.;}
 plan_a=fftw_plan_dft_1d(N, c2400x13, fc2400x13, FFTW_FORWARD, FFTW_ESTIMATE);
 plan_b=fftw_plan_dft_1d(N, s, fd , FFTW_FORWARD, FFTW_ESTIMATE);
 plan_R=fftw_plan_dft_1d(N, fd,ss, FFTW_BACKWARD, FFTW_ESTIMATE);
 fftw_execute (plan_a);
 fftw_execute (plan_b);
 for (k=0;k<N;k++) 
    {mul[0]=fc2400x13[k][0]*fd[k][0]-fc2400x13[k][1]*fd[k][1];
     mul[1]=fc2400x13[k][1]*fd[k][0]+fc2400x13[k][0]*fd[k][1];
     fd[k][0]=mul[0]/(float)N;
     fd[k][1]=mul[1]/(float)N;
    }
 fftw_execute (plan_R);
 fftw_destroy_plan (plan_a);
 fftw_destroy_plan (plan_b);
 fftw_destroy_plan (plan_R); // s=conv(c2400x13,d);
 for (k=0;k<N-NSEARCH;k++) if (ss[k+NSEARCH-2][0]>a) {a=ss[k+NSEARCH-2][0];b=k;} // [a,b]=max(real(s)); 
 printf("a=%f b=%d\n",a,b);fprintf(file,"a=%f b=%d\n",a,b);
 // % plot(d(b-260:b+260)/120,'g');hold on; plot(real(c2400x13),'r');
 b=b%20; // %20; // ajout du -5 car on est cal'es sur cos, et on veut sin (passage a 0)
         // b=mod(b,20);    % revient au debut par pas de 2pi
         // d=d(b+400:end); % bien se caler est fondamental pour la suite 
         //                 % est-il judicieux d'essayer a +/-1 ?

 rs12=(float*)malloc(sizeof(float)*(N-b)/20); // fin20=floor(length(s12)/20)*20;
 rs24=(float*)malloc(sizeof(float)*(N-b)/20); // s12=s12(1:fin20);s24=s24(1:fin20);
 rc12=(float*)malloc(sizeof(float)*(N-b)/20); // fin20=floor(length(s12)/20)*20;
 rc24=(float*)malloc(sizeof(float)*(N-b)/20); // s12=s12(1:fin20);s24=s24(1:fin20);
 l0=0;

 for (k=b;k<N-20;k+=20)
    {rs12[l0]=0.;
     rs24[l0]=0.;
     rc12[l0]=0.;
     rc24[l0]=0.;
     for (t=0;t<20;t++)
       {rs24[l0]+=((float)out[k+t]*s2400[t]);
        rc24[l0]+=((float)out[k+t]*c2400[t]);
        rs12[l0]+=((float)out[k+t]*s1200[t]);
        rc12[l0]+=((float)out[k+t]*c1200[t]);
       }
    // printf("%d %f %f %f %f\n",k,rs12[l0],rs24[l0],rc12[l0],rc24[l0]);
    rs12[l0]=sqrt(rs12[l0]*rs12[l0]+rc12[l0]*rc12[l0]);
    rs24[l0]=sqrt(rs24[l0]*rs24[l0]+rc24[l0]*rc24[l0]);
    if (max24<rs24[l0]) max24=rs24[l0];
    // printf("%f %f\n",rs12[l0],rs24[l0]);
    l0++;
    }

 l0max=l0;
 seuildyn=max24*0.45;printf("dynamic threshold: %f\n",seuildyn);
                     fprintf(file,"dynamic threshold: %f\n",seuildyn);
 seuildyn=seuil;
// for (k=0;k<(N-b)/20;k++) printf("%f %f\n",rs12[k],rs24[k]);
//  l0=find((rs24+rs12)>seuil);   % on ne garde que les points utiles  A FAIRE ?
//  rs12=rs12(l0);rs24=rs24(l0);
 l0=500;
 do l0++; while (((rs24[l0]+rs12[l0])<1.4*seuildyn)&&(l0<l0max));  // debut
 do l0++; while (((rs24[l0]+rs12[l0])>1.4*seuildyn)&&(l0<l0max));  // fin
 fin=l0; // N; // l0;
#ifdef jmfdebug
 printf("end=%d\n",fin);
#endif

 l0=50; 
 do l0++; while ((rs24[l0]<seuildyn)&&(l0<l0max)); // ll=find(rs24>seuil);ll=ll(1);rs12=rs12(ll:end);rs24=rs24(ll:end);
 do l0++; while ((rs12[l0]<rs24[l0])&&(l0<l0max)); // l=find(rs12>rs24);l=l(1);rs12=rs12(l:end);rs24=rs24(l:end);
#ifdef jmfdebug
 printf("first bit=%d\n",l0);
#endif

 if (fin>l0) {
   toutd=(char*)malloc(fin-l0);         // bits
   tout=(char*)malloc(fin-l0+2);        // bits
   message=(char*)malloc((fin-l0+2)/8); // bytes
   for (k=l0;k<fin;k++)  // pos12=find(rs12>rs24);pos24=find(rs24>rs12);toutd(pos12)=0;toutd(pos24)=1;
       if (rs24[k]>rs12[k]) toutd[k-l0]=1; else toutd[k-l0]=0;

   n=0;
   tout[n]=1;n++; // les deux premiers 1 sont oublie's car on se sync sur 1200
   tout[n]=1;n++;
   for (k=0;k<fin-l0;k++)
      {if (toutd[k]==0) tout[n]=1-tout[n-1]; else tout[n]=tout[n-1];
#ifdef jmfdebug
       printf("%d",tout[n]);
#endif
       n=n+1;
      }
   fin=n; // length of tout
   n=0;
   for (k=0;k<fin;k+=8) 
       {message[n]=tout[k]+tout[k+1]*2+tout[k+2]*4+tout[k+3]*8+tout[k+4]*16+tout[k+5]*32+tout[k+6]*64;
        n++;
       }
   fin=n; // length of message (should be tout/8)
   n=0;
   for (k=0;k<fin;k++) {if (message[k]==0x2b) n=k;break;} // search for the 1st 0x2b (start of message)
   for (k=n;k<fin;k++) {printf("%02x ",message[k]);fprintf(file,"%02x ",message[k]);}
   printf("\n");fprintf(file,"\n");
   for (k=n;k<fin;k++)
       if ((message[k]>=32) || (message[k]==13) || (message[k]==10)) 
           {printf("%c",message[k]);fprintf(file,"%c",message[k]);}
   printf("\n");fprintf(file,"\n");fflush(stdout);fflush(file);
   free(tout);free(toutd);
   acars_parse(&message[n],fin-n,file);
   free(message);
  } else printf("end < beginning !\n");
  free(rs12);free(rs24);free(rc12);free(rc24);
  free(out);
  fftw_free(c2400x13);
  fftw_free(fc2400x13);
  fftw_free(fd);
  fftw_free(s);
  fftw_free(ss);
//  time(&tm);
//  printf("\nfinished %s\n\n",ctime(&tm));
}

int acars_decodeur::general_work (int noutput_items,
			       gr_vector_int &ninput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  const float *in = (const float *) input_items[0];
  float *out = (float *) output_items[0];

 float *dm;
 int deb,debut,fin,seuil=3000; // PARAMETRES A AJUSTER
 int k,i,N,t,n;
 char *toutd,*tout;
 char ctmp[MAXSIZE/8];
 double a=0.;
 int b=0,l0=0,memorise;
 fftw_complex *c2400x13,*fc2400x13,*fd,*s,mul,*ss;
 fftw_plan plan_a, plan_b, plan_R;
 double *rs12,*rs24,*rc12,*rc24;
 FILE *f;

  N=noutput_items;
  for (k=0;k<N;k++) _d[_Ntot+k]=in[k];
  _Ntot+=N;
  _total+=N;

// if acq==0 && _Ntot <= 8192 : on ne fait rien d'autre que accumuler 
// if acq==1 && _Ntot < MAXSIZE : on ne fait rien d'autre que accumuler
  if ((_acq==0) && (_Ntot>CHUNKSIZE)) { // COMPLETER SI TAILLE INSUFFISANTE : IL FAUT AU MOINS 8192 POINTS
    if (_status==0) {_status=1;
       dm=(float*)malloc(sizeof(float)*_Ntot);
       remove_avgf(_d,dm,_Ntot,60.);  // c=ones(60,1)/60; dm=conv(d,c);dm=dm(60/2:end-60/2); d=d-dm;

      c2400x13 = (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * _Ntot);
      fc2400x13= (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * _Ntot);
      fd       = (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * _Ntot);
      s        = (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * _Ntot);
      ss       = (fftw_complex *) fftw_malloc (sizeof (fftw_complex) * _Ntot);
      for (t=0;t<520;t++)  // t=[0:520]; c2400x13=exp(i*t*2400/fe*2*pi);
        {c2400x13[t][0]=cos((float)t*2400./fe*2*M_PI);
         c2400x13[t][1]=sin((float)t*2400./fe*2*M_PI);
        }
      for (t=520;t<_Ntot;t++) {c2400x13[t][0]=0;c2400x13[t][1]=0;}
      for (k=0;k<_Ntot;k++) {s[k][0]=(double)dm[k];s[k][1]=0.;}
      plan_a=fftw_plan_dft_1d(_Ntot, c2400x13, fc2400x13, FFTW_FORWARD, FFTW_ESTIMATE);
      plan_b=fftw_plan_dft_1d(_Ntot, s, fd , FFTW_FORWARD, FFTW_ESTIMATE);
      plan_R=fftw_plan_dft_1d(_Ntot, fd,ss, FFTW_BACKWARD, FFTW_ESTIMATE);
      fftw_execute (plan_a);
      fftw_execute (plan_b);
      for (k=0;k<_Ntot;k++) 
        {mul[0]=fc2400x13[k][0]*fd[k][0]-fc2400x13[k][1]*fd[k][1];
         mul[1]=fc2400x13[k][1]*fd[k][0]+fc2400x13[k][0]*fd[k][1];
         fd[k][0]=mul[0]/(float)_Ntot;
         fd[k][1]=mul[1]/(float)_Ntot;
        }
      fftw_execute (plan_R);
      fftw_destroy_plan (plan_a);
      fftw_destroy_plan (plan_b);
      fftw_destroy_plan (plan_R); // s=conv(c2400x13,d);
      a=0.;
      for (k=NSEARCH;k<_Ntot-NSEARCH;k++) 
          if (ss[k][0]<100000.) // probleme de FFT ?
             if (ss[k][0]>a) a=ss[k][0]; // [a,b]=max(real(s)); 
#ifdef jmfdebug
      printf("_Ntot=%d total=%d\tmax=%d\n",_Ntot,_total,(int)a);
#endif
      if (a>(float)seuil) 
         {_acq=1;
          //for (k=_Ntot-1;k>=0;k--) _d[k+CHUNKSIZE]=_d[k];
          //for (k=0;k<CHUNKSIZE;k++) _d[k]=_previous[k];
          //_Ntot+=CHUNKSIZE;
          printf("debut %d\n",_total);fflush(stdout);
         }
         else 
          {
           //for (k=0;k<CHUNKSIZE;k++) _previous[k]=_d[_Ntot-CHUNKSIZE+k];
           _Ntot=0;   // on recommmence une nouvelle acq, les 8192 infos n'ont rien donn'e
          }
      fftw_free(c2400x13);
      fftw_free(fc2400x13);
      fftw_free(fd);
      fftw_free(s);
      fftw_free(ss);
      free(dm);
      _status=0;
    } else printf("\nPROBLEM: status!=0\n");
   } 
   if ((_acq==1) && (_Ntot>MAXSIZE-4*CHUNKSIZE))
      {// printf("\nN=%d",_Ntot);fflush(stdout);
       if (_status!=0) printf("\nPROBLEM: status!=0\n");
       _status=2;
#ifdef jmfdebug
       sprintf(ctmp,"%d.dat",_filenum);_filenum++;
       f=fopen(ctmp,"w");
       for (k=0;k<_Ntot;k++) fprintf(f,"%f\n",_d[k]);
       fclose(f);
#endif
       acars_dec(_d,_Ntot,_seuil,c2400,s2400,c1200,s1200,_FICHIER);
       _Ntot=0;
       _acq=0;
       _status=0;
      }

  // Tell runtime system how many input items we consumed on
  // each input stream.
  consume_each (noutput_items);

  // Tell runtime system how many output items we produced.
  return 0; // noutput_items;
}
