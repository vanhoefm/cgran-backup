/* -*- c++ -*- */
/*
 * Copyright 2011 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 *
 * This file was modified by Andrew Hofmaier in 2011 for the GNU Radio 
 * support package GRGPU.  See www.cgran.org/wiki/GRGPU for more details. 
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <grgpu_resampler_ccf_cuda.h>
#include <gr_io_signature.h>
#include <stdio.h>

/*
 * Create a new instance of grgpu_resampler_ccf_cuda and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
grgpu_resampler_ccf_cuda_sptr 
grgpu_make_resampler_ccf_cuda ()
{
  return grgpu_resampler_ccf_cuda_sptr (new grgpu_resampler_ccf_cuda ());
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
grgpu_resampler_ccf_cuda::grgpu_resampler_ccf_cuda ()
  : gr_block ("resampler_ccf_cuda",
	      gr_make_io_signature (MIN_IN, MAX_IN, sizeof (unsigned long)),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (unsigned long)))
{
  context = 0x0;
  this->set_output_multiple(1024);
  
  // TODO Programmatic Setup of rates/taps
}

/*
 * Our virtual destructor.
 */
grgpu_resampler_ccf_cuda::~grgpu_resampler_ccf_cuda ()
{
  // nothing else required in this example
}


void
grgpu_resampler_ccf_cuda::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
  int nreqd = std::max(201-1, (int)((double) (noutput_items+1) * 7 / 10));
  unsigned ninputs = ninput_items_required.size ();
  for (unsigned i = 0; i < ninputs; i++)
    ninput_items_required[i] = nreqd;
}


/*
 * The C hook into our cuda kernel call
 */
void grgpu_resampler_ccf_cuda_work_device(int noutput_items, const unsigned long* input_items, unsigned long* output_items, void**context, float* h_taps, int ninput_items);


int 
grgpu_resampler_ccf_cuda::general_work (int noutput_items,
			       gr_vector_int &ninput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{

  float h_taps[] = {-1.43105368578e-18, -0.000411543122027, -0.000885368674062, -0.00136924674734, -0.0017982997233, -0.00210182997398, -0.0022120741196, -0.00207397621125, -0.00165479944553, -0.000952275760937, 3.70668152445e-18, 0.00113102362957, 0.0023354224395, 0.0034813254606, 0.00442272005603, 0.00501533830538, 0.00513455457985, 0.00469333585352, 0.00365804298781, 0.00205987063237, -6.98467586927e-18, -0.00235294434242, -0.00477376021445, -0.00699956715107, -0.00875544734299, -0.00978460535407, -0.00988002121449, -0.00891408789903, -0.0068625616841, -0.00381943187676, 1.12071028513e-17, 0.00426944950595, 0.00857564993203, 0.0124547407031, 0.015438218601, 0.0171042662114, 0.0171292480081, 0.0153336161748, 0.0117165893316, 0.00647461274639, -1.61736573765e-17, -0.00714201945812, -0.0142573760822, -0.0205855406821, -0.0253750886768, -0.0279654748738, -0.0278666764498, -0.0248279068619, -0.0188870057464, -0.0103934183717, 2.15511122166e-17, 0.0113782836124, 0.0226372256875, 0.0325828380883, 0.0400491431355, 0.0440234616399, 0.0437665581703, 0.0389147102833, 0.0295513402671, 0.0162382815033, -2.69054324693e-17, -0.0177415385842, -0.0352787189186, -0.0507692024112, -0.0624137297273, -0.068644836545, -0.0683082416654, -0.0608179233968, -0.0462672263384, -0.0254811514169, 3.17527704158e-17, 0.0280096847564, 0.0559139437973, 0.0808301195502, 0.0998891070485, 0.110519379377, 0.110727578402, 0.0993489399552, 0.0762419328094, 0.0424051396549, -3.56219805229e-17, -0.0477290898561, -0.0966371744871, -0.141954094172, -0.178634420037, -0.201755985618, -0.20693552494, -0.19072650373, -0.150964856148, -0.0870306044817, 3.81188682153e-17, 0.107329539955, 0.230548501015, 0.363874614239, 0.500507414341, 0.633073091507, 0.75412607193, 0.856669604778, 0.934653818607, 0.983411967754, 1.0, 0.983411967754, 0.934653818607, 0.856669604778, 0.75412607193, 0.633073091507, 0.500507414341, 0.363874614239, 0.230548501015, 0.107329539955, 3.81188682153e-17, -0.0870306044817, -0.150964856148, -0.19072650373, -0.20693552494, -0.201755985618, -0.178634420037, -0.141954094172, -0.0966371744871, -0.0477290898561, -3.56219805229e-17, 0.0424051396549, 0.0762419328094, 0.0993489399552, 0.110727578402, 0.110519379377, 0.0998891070485, 0.0808301195502, 0.0559139437973, 0.0280096847564, 3.17527704158e-17, -0.0254811514169, -0.0462672263384, -0.0608179233968, -0.0683082416654, -0.068644836545, -0.0624137297273, -0.0507692024112, -0.0352787189186, -0.0177415385842, -2.69054324693e-17, 0.0162382815033, 0.0295513402671, 0.0389147102833, 0.0437665581703, 0.0440234616399, 0.0400491431355, 0.0325828380883, 0.0226372256875, 0.0113782836124, 2.15511122166e-17, -0.0103934183717, -0.0188870057464, -0.0248279068619, -0.0278666764498, -0.0279654748738, -0.0253750886768, -0.0205855406821, -0.0142573760822, -0.00714201945812, -1.61736573765e-17, 0.00647461274639, 0.0117165893316, 0.0153336161748, 0.0171292480081, 0.0171042662114, 0.015438218601, 0.0124547407031, 0.00857564993203, 0.00426944950595, 1.12071028513e-17, -0.00381943187676, -0.0068625616841, -0.00891408789903, -0.00988002121449, -0.00978460535407, -0.00875544734299, -0.00699956715107, -0.00477376021445, -0.00235294434242, -6.98467586927e-18, 0.00205987063237, 0.00365804298781, 0.00469333585352, 0.00513455457985, 0.00501533830538, 0.00442272005603, 0.0034813254606, 0.0023354224395, 0.00113102362957, 3.70668152445e-18, -0.000952275760937, -0.00165479944553, -0.00207397621125, -0.0022120741196, -0.00210182997398, -0.0017982997233, -0.00136924674734, -0.000885368674062, -0.000411543122027, -1.43105368578e-18};  // TODO Make Programmatic

  int i;
  printf("Executing Work function for resampler_ccf_cuda.\n");
  const unsigned long *in = (const unsigned long *) input_items[0];
  unsigned long *out = (unsigned long *) output_items[0];

  //  gr_vector_int &ninput_items;
  //this->forecast (noutput_items, ninput_items)

  int our_ninput_items = (noutput_items*7+0)/10;  // TODO Make Programmatic
   
    printf("From general Work function, I/O: %ld, %ld , noutput:%d ninput %d.\n", in[0], out[0], noutput_items, our_ninput_items);
  grgpu_resampler_ccf_cuda_work_device(noutput_items, in, out, &context, h_taps, our_ninput_items);
   //   for ( i = 0; i < 10; ++i) {
   //	printf("Filter Output[%d]: %f.\n",i,  out[i]);
   //}
   //   scanf("%d", &i);

  consume_each (our_ninput_items);  // TODO Add Start Point calculations

  // Tell runtime system how many output items we produced.
  return noutput_items;
}
