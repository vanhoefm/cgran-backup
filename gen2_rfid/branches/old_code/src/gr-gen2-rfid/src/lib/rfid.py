# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.

import _rfid
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class rfid_transmitter_sptr(object):
    """Proxy of C++ rfid_transmitter_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_transmitter_sptr
        __init__(self,  p) -> rfid_transmitter_sptr
        """
        this = _rfid.new_rfid_transmitter_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_transmitter_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_transmitter_sptr
    __del__ = lambda self : None;
    def msgq(*args):
        """msgq(self) -> gr_msg_queue_sptr"""
        return _rfid.rfid_transmitter_sptr_msgq(*args)

    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_transmitter_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_transmitter_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_transmitter_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_transmitter_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_transmitter_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_transmitter_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_transmitter_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_transmitter_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_transmitter_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_transmitter_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_transmitter_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_transmitter_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_transmitter_sptr_check_topology(*args)

rfid_transmitter_sptr_swigregister = _rfid.rfid_transmitter_sptr_swigregister
rfid_transmitter_sptr_swigregister(rfid_transmitter_sptr)


def rfid_transmitter_block(*args):
  """rfid_transmitter_block(rfid_transmitter_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_transmitter_block(*args)
rfid_transmitter_sptr.block = lambda self: rfid_transmitter_block (self)
rfid_transmitter_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class rfid_transmitter_cc_sptr(object):
    """Proxy of C++ rfid_transmitter_cc_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_transmitter_cc_sptr
        __init__(self,  p) -> rfid_transmitter_cc_sptr
        """
        this = _rfid.new_rfid_transmitter_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_transmitter_cc_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_transmitter_cc_sptr
    __del__ = lambda self : None;
    def msgq(*args):
        """msgq(self) -> gr_msg_queue_sptr"""
        return _rfid.rfid_transmitter_cc_sptr_msgq(*args)

    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_transmitter_cc_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_transmitter_cc_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_transmitter_cc_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_transmitter_cc_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_transmitter_cc_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_transmitter_cc_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_transmitter_cc_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_transmitter_cc_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_transmitter_cc_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_transmitter_cc_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_transmitter_cc_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_transmitter_cc_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_transmitter_cc_sptr_check_topology(*args)

rfid_transmitter_cc_sptr_swigregister = _rfid.rfid_transmitter_cc_sptr_swigregister
rfid_transmitter_cc_sptr_swigregister(rfid_transmitter_cc_sptr)

def transmitter(*args):
  """
    transmitter(int msgq_limit=1) -> rfid_transmitter_sptr
    transmitter() -> rfid_transmitter_sptr
    """
  return _rfid.transmitter(*args)


def rfid_transmitter_cc_block(*args):
  """rfid_transmitter_cc_block(rfid_transmitter_cc_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_transmitter_cc_block(*args)
rfid_transmitter_cc_sptr.block = lambda self: rfid_transmitter_cc_block (self)
rfid_transmitter_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class rfid_monitor_sptr(object):
    """Proxy of C++ rfid_monitor_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_monitor_sptr
        __init__(self,  p) -> rfid_monitor_sptr
        """
        this = _rfid.new_rfid_monitor_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_monitor_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_monitor_sptr
    __del__ = lambda self : None;
    def get_log(*args):
        """get_log(self) -> gr_msg_queue_sptr"""
        return _rfid.rfid_monitor_sptr_get_log(*args)

    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_monitor_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_monitor_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_monitor_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_monitor_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_monitor_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_monitor_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_monitor_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_monitor_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_monitor_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_monitor_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_monitor_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_monitor_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_monitor_sptr_check_topology(*args)

rfid_monitor_sptr_swigregister = _rfid.rfid_monitor_sptr_swigregister
rfid_monitor_sptr_swigregister(rfid_monitor_sptr)

def transmitter_cc(*args):
  """
    transmitter_cc(int msgq_limit=1) -> rfid_transmitter_cc_sptr
    transmitter_cc() -> rfid_transmitter_cc_sptr
    """
  return _rfid.transmitter_cc(*args)


def rfid_monitor_block(*args):
  """rfid_monitor_block(rfid_monitor_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_monitor_block(*args)
rfid_monitor_sptr.block = lambda self: rfid_monitor_block (self)
rfid_monitor_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def monitor(*args):
  """monitor(float us_per_sample, gr_msg_queue_sptr output_q) -> rfid_monitor_sptr"""
  return _rfid.monitor(*args)
class rfid_preamble_detector_sptr(object):
    """Proxy of C++ rfid_preamble_detector_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_preamble_detector_sptr
        __init__(self,  p) -> rfid_preamble_detector_sptr
        """
        this = _rfid.new_rfid_preamble_detector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_preamble_detector_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_preamble_detector_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_preamble_detector_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_preamble_detector_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_preamble_detector_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_preamble_detector_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_preamble_detector_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_preamble_detector_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_preamble_detector_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_preamble_detector_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_preamble_detector_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_preamble_detector_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_preamble_detector_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_preamble_detector_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_preamble_detector_sptr_check_topology(*args)

rfid_preamble_detector_sptr_swigregister = _rfid.rfid_preamble_detector_sptr_swigregister
rfid_preamble_detector_sptr_swigregister(rfid_preamble_detector_sptr)


def rfid_preamble_detector_block(*args):
  """rfid_preamble_detector_block(rfid_preamble_detector_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_preamble_detector_block(*args)
rfid_preamble_detector_sptr.block = lambda self: rfid_preamble_detector_block (self)
rfid_preamble_detector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def preamble_detector(*args):
  """preamble_detector(float us_per_sample, float tag_freq) -> rfid_preamble_detector_sptr"""
  return _rfid.preamble_detector(*args)
class rfid_pulse_sptr(object):
    """Proxy of C++ rfid_pulse_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_pulse_sptr
        __init__(self,  p) -> rfid_pulse_sptr
        """
        this = _rfid.new_rfid_pulse_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_pulse_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_pulse_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_pulse_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_pulse_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_pulse_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_pulse_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_pulse_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_pulse_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_pulse_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_pulse_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_pulse_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_pulse_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_pulse_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_pulse_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_pulse_sptr_check_topology(*args)

rfid_pulse_sptr_swigregister = _rfid.rfid_pulse_sptr_swigregister
rfid_pulse_sptr_swigregister(rfid_pulse_sptr)


def rfid_pulse_block(*args):
  """rfid_pulse_block(rfid_pulse_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_pulse_block(*args)
rfid_pulse_sptr.block = lambda self: rfid_pulse_block (self)
rfid_pulse_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pulse(*args):
  """pulse() -> rfid_pulse_sptr"""
  return _rfid.pulse(*args)
class rfid_pulse_response_sptr(object):
    """Proxy of C++ rfid_pulse_response_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_pulse_response_sptr
        __init__(self,  p) -> rfid_pulse_response_sptr
        """
        this = _rfid.new_rfid_pulse_response_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_pulse_response_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_pulse_response_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_pulse_response_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_pulse_response_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_pulse_response_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_pulse_response_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_pulse_response_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_pulse_response_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_pulse_response_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_pulse_response_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_pulse_response_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_pulse_response_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_pulse_response_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_pulse_response_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_pulse_response_sptr_check_topology(*args)

rfid_pulse_response_sptr_swigregister = _rfid.rfid_pulse_response_sptr_swigregister
rfid_pulse_response_sptr_swigregister(rfid_pulse_response_sptr)


def rfid_pulse_response_block(*args):
  """rfid_pulse_response_block(rfid_pulse_response_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_pulse_response_block(*args)
rfid_pulse_response_sptr.block = lambda self: rfid_pulse_response_block (self)
rfid_pulse_response_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pulse_response(*args):
  """pulse_response(int dec, int interp) -> rfid_pulse_response_sptr"""
  return _rfid.pulse_response(*args)
class rfid_pulse_measure_sptr(object):
    """Proxy of C++ rfid_pulse_measure_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_pulse_measure_sptr
        __init__(self,  p) -> rfid_pulse_measure_sptr
        """
        this = _rfid.new_rfid_pulse_measure_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_pulse_measure_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_pulse_measure_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_pulse_measure_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_pulse_measure_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_pulse_measure_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_pulse_measure_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_pulse_measure_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_pulse_measure_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_pulse_measure_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_pulse_measure_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_pulse_measure_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_pulse_measure_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_pulse_measure_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_pulse_measure_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_pulse_measure_sptr_check_topology(*args)

rfid_pulse_measure_sptr_swigregister = _rfid.rfid_pulse_measure_sptr_swigregister
rfid_pulse_measure_sptr_swigregister(rfid_pulse_measure_sptr)


def rfid_pulse_measure_block(*args):
  """rfid_pulse_measure_block(rfid_pulse_measure_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_pulse_measure_block(*args)
rfid_pulse_measure_sptr.block = lambda self: rfid_pulse_measure_block (self)
rfid_pulse_measure_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pulse_measure(*args):
  """pulse_measure(int dec, int interp) -> rfid_pulse_measure_sptr"""
  return _rfid.pulse_measure(*args)
class rfid_pulse_response_msg_sptr(object):
    """Proxy of C++ rfid_pulse_response_msg_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_pulse_response_msg_sptr
        __init__(self,  p) -> rfid_pulse_response_msg_sptr
        """
        this = _rfid.new_rfid_pulse_response_msg_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_pulse_response_msg_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_pulse_response_msg_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_pulse_response_msg_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_pulse_response_msg_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_pulse_response_msg_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_pulse_response_msg_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_pulse_response_msg_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_pulse_response_msg_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_pulse_response_msg_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_pulse_response_msg_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_pulse_response_msg_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_pulse_response_msg_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_pulse_response_msg_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_pulse_response_msg_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_pulse_response_msg_sptr_check_topology(*args)

rfid_pulse_response_msg_sptr_swigregister = _rfid.rfid_pulse_response_msg_sptr_swigregister
rfid_pulse_response_msg_sptr_swigregister(rfid_pulse_response_msg_sptr)


def rfid_pulse_response_msg_block(*args):
  """rfid_pulse_response_msg_block(rfid_pulse_response_msg_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_pulse_response_msg_block(*args)
rfid_pulse_response_msg_sptr.block = lambda self: rfid_pulse_response_msg_block (self)
rfid_pulse_response_msg_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pulse_response_msg(*args):
  """pulse_response_msg(int dec, int interp, gr_msg_queue_sptr q) -> rfid_pulse_response_msg_sptr"""
  return _rfid.pulse_response_msg(*args)
class rfid_center_ff_sptr(object):
    """Proxy of C++ rfid_center_ff_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_center_ff_sptr
        __init__(self,  p) -> rfid_center_ff_sptr
        """
        this = _rfid.new_rfid_center_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_center_ff_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_center_ff_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_center_ff_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_center_ff_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_center_ff_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_center_ff_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_center_ff_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_center_ff_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_center_ff_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_center_ff_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_center_ff_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_center_ff_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_center_ff_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_center_ff_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_center_ff_sptr_check_topology(*args)

rfid_center_ff_sptr_swigregister = _rfid.rfid_center_ff_sptr_swigregister
rfid_center_ff_sptr_swigregister(rfid_center_ff_sptr)


def rfid_center_ff_block(*args):
  """rfid_center_ff_block(rfid_center_ff_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_center_ff_block(*args)
rfid_center_ff_sptr.block = lambda self: rfid_center_ff_block (self)
rfid_center_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def center_ff(*args):
  """center_ff(int window) -> rfid_center_ff_sptr"""
  return _rfid.center_ff(*args)
class rfid_center_and_scale_ff_sptr(object):
    """Proxy of C++ rfid_center_and_scale_ff_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_center_and_scale_ff_sptr
        __init__(self,  p) -> rfid_center_and_scale_ff_sptr
        """
        this = _rfid.new_rfid_center_and_scale_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_center_and_scale_ff_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_center_and_scale_ff_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_center_and_scale_ff_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_center_and_scale_ff_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_center_and_scale_ff_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_center_and_scale_ff_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_center_and_scale_ff_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_center_and_scale_ff_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_center_and_scale_ff_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_center_and_scale_ff_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_center_and_scale_ff_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_center_and_scale_ff_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_center_and_scale_ff_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_center_and_scale_ff_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_center_and_scale_ff_sptr_check_topology(*args)

rfid_center_and_scale_ff_sptr_swigregister = _rfid.rfid_center_and_scale_ff_sptr_swigregister
rfid_center_and_scale_ff_sptr_swigregister(rfid_center_and_scale_ff_sptr)


def rfid_center_and_scale_ff_block(*args):
  """rfid_center_and_scale_ff_block(rfid_center_and_scale_ff_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_center_and_scale_ff_block(*args)
rfid_center_and_scale_ff_sptr.block = lambda self: rfid_center_and_scale_ff_block (self)
rfid_center_and_scale_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def center_and_scale_ff(*args):
  """center_and_scale_ff(int window) -> rfid_center_and_scale_ff_sptr"""
  return _rfid.center_and_scale_ff(*args)
class rfid_command_gate_sptr(object):
    """Proxy of C++ rfid_command_gate_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_command_gate_sptr
        __init__(self,  p) -> rfid_command_gate_sptr
        """
        this = _rfid.new_rfid_command_gate_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_command_gate_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_command_gate_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_command_gate_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_command_gate_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_command_gate_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_command_gate_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_command_gate_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_command_gate_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_command_gate_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_command_gate_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_command_gate_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_command_gate_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_command_gate_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_command_gate_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_command_gate_sptr_check_topology(*args)

rfid_command_gate_sptr_swigregister = _rfid.rfid_command_gate_sptr_swigregister
rfid_command_gate_sptr_swigregister(rfid_command_gate_sptr)


def rfid_command_gate_block(*args):
  """rfid_command_gate_block(rfid_command_gate_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_command_gate_block(*args)
rfid_command_gate_sptr.block = lambda self: rfid_command_gate_block (self)
rfid_command_gate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def command_gate(*args):
  """command_gate(int dec, int interp, state reader_state) -> rfid_command_gate_sptr"""
  return _rfid.command_gate(*args)
class rfid_cmd_gate_sptr(object):
    """Proxy of C++ rfid_cmd_gate_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_cmd_gate_sptr
        __init__(self,  p) -> rfid_cmd_gate_sptr
        """
        this = _rfid.new_rfid_cmd_gate_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_cmd_gate_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_cmd_gate_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_cmd_gate_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_cmd_gate_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_cmd_gate_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_cmd_gate_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_cmd_gate_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_cmd_gate_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_cmd_gate_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_cmd_gate_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_cmd_gate_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_cmd_gate_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_cmd_gate_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_cmd_gate_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_cmd_gate_sptr_check_topology(*args)

rfid_cmd_gate_sptr_swigregister = _rfid.rfid_cmd_gate_sptr_swigregister
rfid_cmd_gate_sptr_swigregister(rfid_cmd_gate_sptr)


def rfid_cmd_gate_block(*args):
  """rfid_cmd_gate_block(rfid_cmd_gate_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_cmd_gate_block(*args)
rfid_cmd_gate_sptr.block = lambda self: rfid_cmd_gate_block (self)
rfid_cmd_gate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def cmd_gate(*args):
  """cmd_gate(int dec, state reader_state) -> rfid_cmd_gate_sptr"""
  return _rfid.cmd_gate(*args)
class rfid_mm_reader_sptr(object):
    """Proxy of C++ rfid_mm_reader_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_mm_reader_sptr
        __init__(self,  p) -> rfid_mm_reader_sptr
        """
        this = _rfid.new_rfid_mm_reader_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_mm_reader_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_mm_reader_sptr
    __del__ = lambda self : None;
    STATE_PTR = _swig_property(_rfid.rfid_mm_reader_sptr_STATE_PTR_get, _rfid.rfid_mm_reader_sptr_STATE_PTR_set)
    def get_log(*args):
        """get_log(self) -> gr_msg_queue_sptr"""
        return _rfid.rfid_mm_reader_sptr_get_log(*args)

    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_mm_reader_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_mm_reader_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_mm_reader_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_mm_reader_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_mm_reader_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_mm_reader_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_mm_reader_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_mm_reader_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_mm_reader_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_mm_reader_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_mm_reader_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_mm_reader_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_mm_reader_sptr_check_topology(*args)

rfid_mm_reader_sptr_swigregister = _rfid.rfid_mm_reader_sptr_swigregister
rfid_mm_reader_sptr_swigregister(rfid_mm_reader_sptr)


def rfid_mm_reader_block(*args):
  """rfid_mm_reader_block(rfid_mm_reader_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_mm_reader_block(*args)
rfid_mm_reader_sptr.block = lambda self: rfid_mm_reader_block (self)
rfid_mm_reader_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def mm_reader(*args):
  """mm_reader(int dec, int interp) -> rfid_mm_reader_sptr"""
  return _rfid.mm_reader(*args)
class rfid_gen2_reader_sptr(object):
    """Proxy of C++ rfid_gen2_reader_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_gen2_reader_sptr
        __init__(self,  p) -> rfid_gen2_reader_sptr
        """
        this = _rfid.new_rfid_gen2_reader_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_gen2_reader_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_gen2_reader_sptr
    __del__ = lambda self : None;
    STATE_PTR = _swig_property(_rfid.rfid_gen2_reader_sptr_STATE_PTR_get, _rfid.rfid_gen2_reader_sptr_STATE_PTR_set)
    def get_log(*args):
        """get_log(self) -> gr_msg_queue_sptr"""
        return _rfid.rfid_gen2_reader_sptr_get_log(*args)

    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_gen2_reader_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_gen2_reader_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_gen2_reader_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_gen2_reader_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_gen2_reader_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_gen2_reader_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_gen2_reader_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_gen2_reader_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_gen2_reader_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_gen2_reader_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_gen2_reader_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_gen2_reader_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_gen2_reader_sptr_check_topology(*args)

rfid_gen2_reader_sptr_swigregister = _rfid.rfid_gen2_reader_sptr_swigregister
rfid_gen2_reader_sptr_swigregister(rfid_gen2_reader_sptr)


def rfid_gen2_reader_block(*args):
  """rfid_gen2_reader_block(rfid_gen2_reader_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_gen2_reader_block(*args)
rfid_gen2_reader_sptr.block = lambda self: rfid_gen2_reader_block (self)
rfid_gen2_reader_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def gen2_reader(*args):
  """gen2_reader(int dec, int interp) -> rfid_gen2_reader_sptr"""
  return _rfid.gen2_reader(*args)
class rfid_clock_recovery_zc_ff_sptr(object):
    """Proxy of C++ rfid_clock_recovery_zc_ff_sptr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rfid_clock_recovery_zc_ff_sptr
        __init__(self,  p) -> rfid_clock_recovery_zc_ff_sptr
        """
        this = _rfid.new_rfid_clock_recovery_zc_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr___deref__(*args)

    __swig_destroy__ = _rfid.delete_rfid_clock_recovery_zc_ff_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rfid.rfid_clock_recovery_zc_ff_sptr_check_topology(*args)

rfid_clock_recovery_zc_ff_sptr_swigregister = _rfid.rfid_clock_recovery_zc_ff_sptr_swigregister
rfid_clock_recovery_zc_ff_sptr_swigregister(rfid_clock_recovery_zc_ff_sptr)


def rfid_clock_recovery_zc_ff_block(*args):
  """rfid_clock_recovery_zc_ff_block(rfid_clock_recovery_zc_ff_sptr r) -> gr_block_sptr"""
  return _rfid.rfid_clock_recovery_zc_ff_block(*args)
rfid_clock_recovery_zc_ff_sptr.block = lambda self: rfid_clock_recovery_zc_ff_block (self)
rfid_clock_recovery_zc_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def clock_recovery_zc_ff(*args):
  """clock_recovery_zc_ff(int samples_per_pulse, int interp_factor) -> rfid_clock_recovery_zc_ff_sptr"""
  return _rfid.clock_recovery_zc_ff(*args)


