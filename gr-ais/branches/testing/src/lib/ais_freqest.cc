//ais_freqest.cc
/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <ais_freqest.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of ais_freqest and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
ais_freqest_sptr ais_make_freqest(int sample_rate, int data_rate, int fftlen)
{
  return ais_freqest_sptr (new ais_freqest (sample_rate, data_rate, fftlen));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;    // mininum number of input streams
static const int MAX_IN = 1;    // maximum number of input streams
static const int MIN_OUT = 1;   // minimum number of output streams
static const int MAX_OUT = 1;   // maximum number of output streams

/*
 * The private constructor
 */
ais_freqest::ais_freqest (int sample_rate, int data_rate, int fftlen)
  : gr_sync_block ("freqest",
                   gr_make_io_signature (MIN_IN, MAX_IN, sizeof (gr_complex) * fftlen),
                   gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (float)))
{
	//the FFT width is equal to the sample rate
	//the FFT bin size is equal to the FFT width divided by the number of bins
	//the offset is equal to the number of bins times (the data rate / the sample rate)

	d_offset = fftlen * (float(data_rate) / float(sample_rate));
	d_binsize = float(sample_rate) / float(fftlen);

//	printf("Offset: %i, bin size: %f\n", d_offset, d_binsize);
}

/*
 * Our virtual destructor.
 */
ais_freqest::~ais_freqest ()
{
  // nothing else required in this example
}

int 
ais_freqest::work (int noutput_items,
                        gr_vector_const_void_star &input_items,
                        gr_vector_void_star &output_items)
{

  const gr_complex *in = (const gr_complex *) input_items[0];
  float *out = (float *) output_items[0];

	unsigned int fftlen = input_signature()->sizeof_stream_item(0) / sizeof(gr_complex);

	float maxenergy = 0;
	unsigned int maxpos = 0;
	float currentenergy;

	//you are responsible for organizing the vector
  for (int i = 0; i < noutput_items; i++){
		//for each requested output item
		maxenergy = 0;
		for(unsigned int j = 0; j < fftlen - d_offset; j++) {
			//over the entire fft up until the right side of the "window" butts up against the end
			currentenergy = std::abs(in[i*fftlen+j]) + std::abs(in[i*fftlen+j+d_offset]); //sum of the two bins at -datarate/2 and +datarate/2
			if(currentenergy > maxenergy) {
				maxenergy = currentenergy;
				maxpos = j + d_offset/2; //add the offset to find the center position
			}
		}
		//now maxpos contains the center bin, and we must translate that to a frequency offset
		out[i] = (float(maxpos) - fftlen/2) * d_binsize/2; //subtract fftlen/2 to center the complex FFT around 0
//		printf("maxpos is %u\n", maxpos);
  }

  // Tell runtime system how many output items we produced.
  return noutput_items;
}

