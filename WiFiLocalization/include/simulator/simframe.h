/** nrlframe.h: Application frame class for GUI
 * 
 * @author Brian Shaw
 * 
 */
/* 
 * This file is part of WiFi Localization
 * 
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License along 
 * with this program; if not, write to the Free Software Foundation, Inc., 
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef NRL_SIM_FRAME_H
#define NRL_SIM_FRAME_H

#include <wx/wx.h>
#include <wx/socket.h>

#include "logthread.h"
#include "sensor.h"
#include "newsensordialog.h"
#include "app.h"
#include "simintruder.h"
#include "newintruderdialog.h"
#include "pktsend.h"
#include "pktgen.h"
#include "nrlhelpdialog.h"
#include "loglinearmodel.h"
#include "lightspeedtoa.h"

//Specify how many sensors we want to use
//FUTURE: Make this something the user can expand
#define NUM_SENSORS_DESIRED	3

using namespace std;


class NRLFrame : public wxFrame{
public:
  //Constructor
  NRLFrame(const wxString& title, NRLApp* app);
  
  //Event handlers
  void OnQuit(wxCommandEvent& event);
  void OnAbout(wxCommandEvent& event);
  void OnNewSensor(wxCommandEvent& event);
  void OnNewIntruder(wxCommandEvent& event);
  void OnWhatNext(wxCommandEvent& event);
  
  void OnSendingTest(wxCommandEvent& event);
  void OnEasySetup(wxCommandEvent& event);
  
  void OnConnectToServer(wxCommandEvent& event);
  
  void OnSimStart(wxCommandEvent& WXUNUSED(event));
  void OnSimStop(wxCommandEvent& WXUNUSED(event));
  void OnClientEvent(wxSocketEvent& WXUNUSED(event));
  void OnSocketEvent(wxSocketEvent& event);
  void OnTimerEvent(wxTimerEvent& event);
  
  NRLApp* theapp;
  bool werecalibrating;
private:
  TheIntruders* intruders;
  SensorList sensorlist;
  PacketGen* generator;
  
  void makeSensorVisible(Sensor* sens);
  void makeSensorInvisible(Sensor* sens);
  bool associateConnection(Sensor* sens);
  void sendAllPackets(void); //Helper for sending all packets generated by an update
  
  TheLoggerThread* logger;
  PktSender* sender;
  
  //Dialog stuff
  NewIntruderDialog* newintruderdialog;
  Intruder* newintruder;
  NewSensorDialog* newsensordialog;
  Location* newsensorloc;
  NRLHelpDialog* helpdialog;
  
  //Distance calculation modules
  ToADistanceCalculator* tmodel;
  
  DECLARE_EVENT_TABLE()
  
  //Open client connections
  std::vector<wxSocketBase*> connections;
  
  //Timer for updating intruders
  wxTimer* timer;
  bool updates_enabled;
  
  //Button pool functions
  std::vector<bool> buttonsavailable;
  int getNextButtonID(void);
  void freeButtonID(int id);
  //Lots of button events, one for each button in the button pool
  void onButtonClick(int buttonid);
  void onButtonClick0(wxCommandEvent& event);
  void onButtonClick1(wxCommandEvent& event);
  void onButtonClick2(wxCommandEvent& event);
  void onButtonClick3(wxCommandEvent& event);
  void onButtonClick4(wxCommandEvent& event);
  void onButtonClick5(wxCommandEvent& event);
  void onButtonClick6(wxCommandEvent& event);
  void onButtonClick7(wxCommandEvent& event);
  void onButtonClick8(wxCommandEvent& event);
  void onButtonClick9(wxCommandEvent& event);
  void onButtonClick10(wxCommandEvent& event);
};

#endif
